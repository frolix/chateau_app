import 'package:flutter/material.dart';
import 'package:flutter_map/flutter_map.dart';
import 'package:latlong2/latlong.dart';

class MapCard extends StatelessWidget {
  /// –Ø–∫—â–æ —Ö–æ—á–µ—à –∑—Ä–æ–±–∏—Ç–∏ –∫–∞—Ä—Ç—É –Ω–µ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—é ‚Äì –ø–æ—Å—Ç–∞–≤ false
  final bool interactive;

  /// –¶–µ–Ω—Ç—Ä –∫–∞—Ä—Ç–∏
  final LatLng center;

  /// –ü–æ—á–∞—Ç–∫–æ–≤–∏–π zoom
  final double zoom;

  /// –ú–∞—Ä–∫–µ—Ä–∏ (–Ω–µ–æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ)
  final List<LatLng> points;

  /// –¢–∞–ø –ø–æ –∫–∞—Ä—Ç—Ü—ñ ‚Üí –≤—ñ–¥–∫—Ä–∏—Ç–∏ –ø–æ–≤–Ω–æ–µ–∫—Ä–∞–Ω–Ω—É –º–∞–ø—É
  final VoidCallback? onOpenFull;

  const MapCard({
    super.key,
    this.interactive = true,
    this.center = const LatLng(48.8566, 2.3522),
    this.zoom = 12,
    this.points = const [
      LatLng(48.853, 2.349),
      LatLng(48.861, 2.335),
      LatLng(48.866, 2.312),
      LatLng(48.855, 2.371),
      LatLng(48.845, 2.325),
      LatLng(48.872, 2.345),
      LatLng(48.858, 2.303),
    ],
    this.onOpenFull,
  });

  static const double _w = 355;
  static const double _h = 320;
  static const double _radius = 28;

  @override
  Widget build(BuildContext context) {
    return Center(
      child: Container(
        width: _w,
        decoration: BoxDecoration(
          borderRadius: BorderRadius.circular(_radius),
          boxShadow: [
            BoxShadow(
              color: const Color(0xFF2E46FF).withOpacity(0.4),
              blurRadius: 28,
              offset: const Offset(0, 10),
            ),
          ],
          border: Border.all(color: const Color(0xFF2E46FF), width: 2),
        ),
        child: ClipRRect(
          borderRadius: BorderRadius.circular(_radius),
          child: SizedBox(
            height: _h,
            child: Stack(
              fit: StackFit.expand,
              children: [
                // ---- OpenStreetMap —á–µ—Ä–µ–∑ flutter_map ----
                FlutterMap(
                  options: MapOptions(
                    initialCenter: center,
                    initialZoom: zoom,
                    interactionOptions:
                        interactive
                            ? const InteractionOptions(
                              // —Ñ—ñ–∫—Å—É—î–º–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç (–±–µ–∑ –æ–±–µ—Ä—Ç–∞–Ω–Ω—è)
                              flags:
                                  InteractiveFlag.all & ~InteractiveFlag.rotate,
                            )
                            : const InteractionOptions(
                              flags: InteractiveFlag.none,
                            ),
                  ),
                  children: [
                    TileLayer(
                      urlTemplate:
                          'https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png',
                      subdomains: const ['a', 'b', 'c', 'd'],
                      userAgentPackageName: 'com.example.chatau',
                    ),
                    MarkerLayer(
                      markers:
                          points
                              .map(
                                (p) => Marker(
                                  point: p,
                                  width: 22,
                                  height: 22,
                                  alignment: Alignment.center,
                                  child: Image.asset(
                                    'assets/images/map-pin.png',
                                    width: 24,
                                    height: 38,
                                  ),
                                ),
                              )
                              .toList(),
                    ),
                  ],
                ),

                // –õ–µ–≥–∫–∞ –∑–∞—Ç–µ–º–Ω—é—é—á–∞ –≤—É–∞–ª—å
                IgnorePointer(
                  child: Container(color: Colors.black.withOpacity(0.25)),
                ),

                // –ü—Ä–æ–∑–æ—Ä–∏–π —à–∞—Ä –¥–ª—è –∫–ª—ñ–∫—É –ø–æ –≤—Å—ñ–π –∫–∞—Ä—Ç—Ü—ñ
                if (onOpenFull != null)
                  Positioned.fill(
                    child: Material(
                      color: Colors.transparent,
                      child: InkWell(onTap: onOpenFull),
                    ),
                  ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}





/*

import 'package:chatau/features/home_tab/presentation/widgets/detail_full_screen.dart';
import 'package:flutter/material.dart';

import 'package:chatau/features/home_tab/presentation/widgets/guide_header_card.dart';
import 'package:chatau/features/home_tab/presentation/widgets/map_card.dart';
import 'package:chatau/features/home_tab/presentation/widgets/places_map_overlay.dart';
import 'package:chatau/shared/domain/models/place.dart';

enum _OverlayStage { map, details }

class HomeTab extends StatefulWidget {
  const HomeTab({super.key});

  @override
  State<HomeTab> createState() => _HomeTabState();
}

class _HomeTabState extends State<HomeTab> {
  bool _overlayVisible = false;
  _OverlayStage _stage = _OverlayStage.map;
  Place? _selected;

  void _openOverlayWithMap() {
    setState(() {
      _overlayVisible = true;
      _stage = _OverlayStage.map;
      _selected = null;
    });
  }

  void _closeOverlay() {
    setState(() {
      _overlayVisible = false;
      _selected = null;
      _stage = _OverlayStage.map;
    });
  }

  void _openDetails(Place p) {
    setState(() {
      _selected = p;
      _stage = _OverlayStage.details;
    });
  }

  void _backFromDetails() {
    setState(() {
      _stage = _OverlayStage.map; // üëà –Ω–µ —á—ñ–ø–∞—î–º–æ _selected —Ç—É—Ç
    });
  }

  @override
  Widget build(BuildContext context) {
    final safeTop = MediaQuery.of(context).padding.top;
    const targetTop = 59.0;
    final extraTop = (targetTop - safeTop).clamp(0.0, double.infinity);

    return Stack(
      children: [
        // ---- –ö–æ–Ω—Ç–µ–Ω—Ç –≤–∫–ª–∞–¥–∫–∏ ----
        ListView(
          padding: EdgeInsets.only(top: extraTop, bottom: 12),
          children: [
            if (!_overlayVisible) ...[
              const GuideHeaderCard(),
              const SizedBox(height: 16),
              MapCard(interactive: false, onOpenFull: _openOverlayWithMap),
            ],
            const SizedBox(height: 16),
          ],
        ),

        // ---- –ü–æ–≤–Ω–æ–µ–∫—Ä–∞–Ω–Ω–∏–π —à–∞—Ä ----
        AnimatedPositioned(
          duration: const Duration(milliseconds: 250),
          curve: Curves.easeOut,
          left: 0,
          right: 0,
          top: _overlayVisible ? 0 : MediaQuery.of(context).size.height,
          bottom: 0,
          child: IgnorePointer(
            ignoring: !_overlayVisible,
            child: AnimatedOpacity(
              duration: const Duration(milliseconds: 200),
              opacity: _overlayVisible ? 1 : 0,
              child: Material(
                color: Colors.transparent, // —Ñ–æ–Ω –ø—ñ–¥ –≤–º—ñ—Å—Ç–æ–º
                child: SafeArea(
                  child: Stack(
                    children: [
                      // ==================== 1) –ö–û–ù–¢–ï–ù–¢ –ü–Ü–î –ù–ò–ó–û–ú ====================
                      Padding(
                        padding: const EdgeInsets.only(top: 0),
                        child: ClipRect(
                          // –æ–±—Ä—ñ–∑–∞—î –≤—Å–µ, —â–æ –≤–∏—ó—Ö–∞–ª–æ
                          child: Stack(
                            clipBehavior: Clip.hardEdge,
                            children: [
                              // MAP
                              IgnorePointer(
                                ignoring: _stage != _OverlayStage.map,
                                child: AnimatedSlide(
                                  offset:
                                      _stage == _OverlayStage.map
                                          ? Offset.zero
                                          : const Offset(-1, 0),
                                  duration: const Duration(milliseconds: 380),
                                  curve: Curves.easeOutCubic,
                                  child: Material(
                                    color: Colors.transparent,
                                    child: PlacesMapOverlay(
                                      key: const ValueKey('overlay-map'),
                                      onClose: _closeOverlay,
                                      onOpenDetails: _openDetails,
                                    ),
                                  ),
                                ),
                              ),

                              // DETAILS (–ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –ù–ò–ñ–ß–ï –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥")
                              IgnorePointer(
                                ignoring: _stage != _OverlayStage.details,
                                child: AnimatedSlide(
                                  offset:
                                      _stage == _OverlayStage.details
                                          ? Offset.zero
                                          : const Offset(1, 0),
                                  duration: const Duration(milliseconds: 380),
                                  curve: Curves.easeOutCubic,
                                  onEnd: () {
                                    if (!mounted) return;
                                    if (_stage != _OverlayStage.details &&
                                        _selected != null) {
                                      setState(() => _selected = null);
                                    }
                                  },
                                  child: Material(
                                    color: Colors.transparent,
                                    child:
                                        (_selected != null)
                                            ? Padding(
                                              // >>> —Ü–∏–º –≤—ñ–¥—Å—É–≤–∞—î–º–æ –∫–∞—Ä—Ç–∫—É –Ω–∏–∂—á–µ –∫–Ω–æ–ø–∫–∏
                                              padding: const EdgeInsets.only(
                                                top:
                                                    68, // 12 (–≤—ñ–¥—Å—Ç—É–ø –∑–≤–µ—Ä—Ö—É) + ~48 (—Ä–æ–∑–º—ñ—Ä –∫–Ω–æ–ø–∫–∏) + 8 –∑–∞–ø–∞—Å
                                              ),
                                              child: DetailsFullScreen(
                                                key: const ValueKey(
                                                  'overlay-details',
                                                ),
                                                place: _selected!,
                                              ),
                                            )
                                            : const SizedBox.shrink(),
                                  ),
                                ),
                              ),
                            ],
                          ),
                        ),
                      ),

                      // ==================== 2) –ö–ù–û–ü–ö–ò –ù–ê–î –ö–û–ù–¢–ï–ù–¢–û–ú ====================
                      if (_stage == _OverlayStage.details)
                        Positioned(
                          left: 12,
                          top: 12,
                          child: IconButton(
                            onPressed: _backFromDetails,
                            icon: const Icon(Icons.arrow_back),
                            color: Colors.white,
                            style: IconButton.styleFrom(
                              backgroundColor:
                                  Colors.transparent, // –±–µ–∑ –ø—ñ–¥–∫–ª–∞–¥–∫–∏
                              foregroundColor: Colors.white,
                              padding: const EdgeInsets.all(8),
                              minimumSize: const Size(48, 48),
                            ),
                            tooltip: 'Back',
                          ),
                        ),
                    ],
                  ),
                ),
              ),
            ),
          ),
        ),
      ],
    );
  }
}

*/

/*
import 'dart:math' as math;
import 'package:flutter/material.dart';
import 'package:chatau/features/home_tab/presentation/widgets/guide_header_card.dart';
import 'package:chatau/features/home_tab/presentation/widgets/places_map_overlay.dart';
import 'package:chatau/features/home_tab/presentation/widgets/detail_full_screen.dart';
import 'package:chatau/shared/domain/models/place.dart';

enum _OverlayStage { map, details }

class HomeTab extends StatefulWidget {
  const HomeTab({super.key});

  @override
  State<HomeTab> createState() => _HomeTabState();
}

class _HomeTabState extends State<HomeTab> {
  // ---- —Å—Ç–∞–Ω–∏ ----
  bool _expanded = false; // –∫–∞—Ä—Ç–∞ —Ä–æ–∑–≥–æ—Ä–Ω—É—Ç–∞ –Ω–∞ –≤–µ—Å—å –µ–∫—Ä–∞–Ω?
  _OverlayStage _stage = _OverlayStage.map;
  Place? _selected;

  // ---- –≤–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó ‚Äú–¥—ñ—Ä–∫–∏‚Äù –ø—ñ–¥ –º–∞–ª–µ–Ω—å–∫—É –∫–∞—Ä—Ç—É ----
  final _listCtrl = ScrollController();
  final _holeKey = GlobalKey();
  Rect? _holeRect; // –≥–ª–æ–±–∞–ª—å–Ω—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ ‚Äú–¥—ñ—Ä–∫–∏‚Äù

  // –†–æ–∑–º—ñ—Ä–∏ –º–∞–ª–µ–Ω—å–∫–æ—ó –∫–∞—Ä—Ç–∫–∏ (—è–∫ —É –º–∞–∫–µ—Ç—ñ)
  static const double _cardW = 355;
  static const double _cardH = 320;
  static const double _cardRadius = 28;

  @override
  void initState() {
    super.initState();
    _listCtrl.addListener(_updateHoleRectThrottled);
    WidgetsBinding.instance.addPostFrameCallback((_) => _updateHoleRect());
  }

  @override
  void dispose() {
    _listCtrl.removeListener(_updateHoleRectThrottled);
    _listCtrl.dispose();
    super.dispose();
  }

  // –¢—Ä–æ—Ö–∏ ‚Äú–¥–µ–±–∞—É–Ω—Å–∏–º–æ‚Äù –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—ñ–¥ —á–∞—Å —Å–∫—Ä–æ–ª—É
  bool _pending = false;
  void _updateHoleRectThrottled() {
    if (_expanded) return; // –∫–æ–ª–∏ —Ñ—É–ª—Å–∫—Ä—ñ–Ω ‚Äî –Ω–µ —Ç—Ä–µ–±–∞
    if (_pending) return;
    _pending = true;
    WidgetsBinding.instance.addPostFrameCallback((_) {
      _updateHoleRect();
      _pending = false;
    });
  }

  void _updateHoleRect() {
    if (!mounted) return;
    final ctx = _holeKey.currentContext;
    if (ctx == null) return;
    final box = ctx.findRenderObject() as RenderBox?;
    if (box == null || !box.attached) return;
    final topLeft = box.localToGlobal(Offset.zero);
    final size = box.size;
    setState(() {
      _holeRect = Rect.fromLTWH(
        topLeft.dx,
        topLeft.dy,
        size.width,
        size.height,
      );
    });
  }

  // ---- –¥—ñ—ó ----
  void _onTapSmallMap() {
    setState(() {
      _expanded = true; // —Ä–æ–∑–≥–æ—Ä—Ç–∞—î–º–æ—Å—å
      _stage = _OverlayStage.map; // —Å—Ç–∞—Ä—Ç—É—î–º–æ –∑—ñ —Å—Ç–∞–Ω—É ‚Äú–º–∞–ø–∞‚Äù
    });
  }

  void _closeFull() {
    setState(() {
      _expanded = false; // –∑–≥–æ—Ä—Ç–∞—î–º–æ—Å—å –Ω–∞–∑–∞–¥
      _stage = _OverlayStage.map;
      _selected = null;
      // –ø—ñ—Å–ª—è –∑–≥–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–º—ñ—Ä—è—î–º–æ ‚Äú–¥—ñ—Ä–∫—É‚Äù
      WidgetsBinding.instance.addPostFrameCallback((_) => _updateHoleRect());
    });
  }

  void _openDetails(Place p) {
    setState(() {
      _selected = p;
      _stage = _OverlayStage.details;
    });
  }

  void _backFromDetails() {
    setState(() => _stage = _OverlayStage.map);
  }

  @override
  Widget build(BuildContext context) {
    final mq = MediaQuery.of(context);
    final fullW = mq.size.width;
    final fullH = mq.size.height;

    // –ü–æ–∑–∏—Ü—ñ—è –¥–ª—è –∑–≥–æ—Ä–Ω—É—Ç–æ–≥–æ —Å—Ç–∞–Ω—É: –±–µ—Ä–µ–º–æ –∑ –≤–∏–º—ñ—Ä—è–Ω–æ—ó ‚Äú–¥—ñ—Ä–∫–∏‚Äù
    final collapsedTop = _holeRect?.top ?? math.max(mq.padding.top + 100, 140);
    final collapsedLeft = _holeRect?.left ?? (fullW - _cardW) / 2;
    final collapsedW = _holeRect?.width ?? _cardW;
    final collapsedH = _holeRect?.height ?? _cardH;

    return Stack(
      children: [
        // ================== 1) –ó–í–ò–ß–ê–ô–ù–ò–ô –°–ö–†–û–õ-–ö–û–ù–¢–ï–ù–¢ ==================
        ListView(
          controller: _listCtrl,
          padding: const EdgeInsets.only(top: 59, bottom: 24),
          children: [
            // –•–æ–≤–∞—î–º–æ —Ö–µ–¥–µ—Ä, –∫–æ–ª–∏ –∫–∞—Ä—Ç–∞ —Ñ—É–ª—Å–∫—Ä—ñ–Ω
            if (!_expanded) ...[
              const GuideHeaderCard(),
              const SizedBox(height: 16),
            ],

            // ‚Äú–î—ñ—Ä–∫–∞‚Äù –ø—ñ–¥ –º–∞–ª–µ–Ω—å–∫—É –∫–∞—Ä—Ç—É (—Å–∞–º–æ—ó –∫–∞—Ä—Ç–∏ —Ç—É—Ç –Ω–µ–º–∞!)
            // –í–∏—Å–æ—Ç–∞/—à–∏—Ä–∏–Ω–∞ —è–∫ —É –∫–∞—Ä—Ç–∫–∏, —â–æ–± –º–∞–∫–µ—Ç –ª–∏—à–∞–≤—Å—è
            Center(
              child: SizedBox(
                key: _holeKey,
                width: _cardW,
                height: _cardH,
                // —è–∫—â–æ –±–∞–∂–∞—î—à –∫–ª—ñ–∫ –ø–æ ‚Äú–¥—ñ—Ä—Ü—ñ‚Äù —Ç–∞–∫–æ–∂ –≤—ñ–¥–∫—Ä–∏–≤–∞–≤ ‚Äî –¥–æ–¥–∞–π GestureDetector
                child: const SizedBox.shrink(),
              ),
            ),

            const SizedBox(height: 600), // —ñ–Ω—à–∏–π –¥–µ–º–æ-–∫–æ–Ω—Ç–µ–Ω—Ç
          ],
        ),

        // ================== 2) –Ñ–î–ò–ù–ê –ö–ê–†–¢–ê –ó–í–ï–†–•–£ ==================
        AnimatedPositioned(
          duration: const Duration(milliseconds: 380),
          curve: Curves.easeOutCubic,
          top: _expanded ? 0 : collapsedTop,
          left: _expanded ? 0 : collapsedLeft,
          width: _expanded ? fullW : collapsedW,
          height: _expanded ? fullH : collapsedH,
          child: AnimatedContainer(
            duration: const Duration(milliseconds: 380),
            curve: Curves.easeOutCubic,
            decoration: BoxDecoration(
              borderRadius: BorderRadius.circular(_expanded ? 0 : _cardRadius),
              // —Ä–∞–º–∫–∞+—Ç—ñ–Ω—å —É –∑–≥–æ—Ä–Ω—É—Ç–æ–º—É —Å—Ç–∞–Ω—ñ (—è–∫ –∫–∞—Ä—Ç–∫–∞)
              boxShadow:
                  _expanded
                      ? const []
                      : [
                        BoxShadow(
                          color: const Color(0xFF2E46FF).withOpacity(0.4),
                          blurRadius: 28,
                          offset: const Offset(0, 10),
                        ),
                      ],
              border:
                  _expanded
                      ? null
                      : Border.all(color: const Color(0xFF2E46FF), width: 2),
            ),
            clipBehavior: Clip.antiAlias,
            child: Stack(
              children: [
                // ---- –¢–£–¢ –ñ–ò–í–ï –Ñ–î–ò–ù–ê –ö–ê–†–¢–ê ----
                PlacesMapOverlay(
                  key: const ValueKey('home-map-one-and-only'),
                  onClose: _closeFull, // –∑–∞–∫—Ä–∏—Ç–∏ —Ñ—É–ª—Å–∫—Ä—ñ–Ω
                  onOpenDetails: _openDetails, // –≤—ñ–¥–∫—Ä–∏—Ç–∏ –¥–µ—Ç–∞–ª—ñ
                  // –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ —Å–∞–º–æ–≥–æ overlay —Ç–∏ –≤–∂–µ –∫–µ—Ä—É—î—à –≤–∏–±–æ—Ä–æ–º + –º—ñ–Ω—ñ-–∫–∞—Ä—Ç–∫–æ—é
                ),

                // –õ–µ–≥–∫–∞ –≤—É–∞–ª—å + –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –≤–∑–∞—î–º–æ–¥—ñ–π —É –∑–≥–æ—Ä–Ω—É—Ç–æ–º—É —Å—Ç–∞–Ω—ñ
                if (!_expanded)
                  Positioned.fill(
                    child: IgnorePointer(
                      child: Container(color: Colors.black.withOpacity(0.25)),
                    ),
                  ),
                if (!_expanded)
                  Positioned.fill(
                    child: Material(
                      color: Colors.transparent,
                      child: InkWell(onTap: _onTapSmallMap),
                    ),
                  ),

                // ---- –ö–ù–û–ü–ö–ò –õ–ò–®–ï –£ –§–£–õ–°–ö–†–Ü–ù–Ü ----
                if (_expanded) ...[
                  // –ó–∞–∫—Ä–∏—Ç–∏ —Ñ—É–ª—Å–∫—Ä—ñ–Ω
                  Positioned(
                    right: 12,
                    top: 12 + mq.padding.top,
                    child: IconButton.filled(
                      style: IconButton.styleFrom(
                        backgroundColor: Colors.black.withOpacity(0.35),
                        foregroundColor: Colors.white,
                      ),
                      onPressed: _closeFull,
                      icon: const Icon(Icons.close),
                      tooltip: 'Close',
                    ),
                  ),

                  // –ù–∞–∑–∞–¥ –∑ details —É map (–∫–Ω–æ–ø–∫–∞ –Ω–∞–¥ –¥–µ—Ç–∞–ª—è–º–∏)
                  if (_stage == _OverlayStage.details)
                    Positioned(
                      left: 12,
                      top: 12 + mq.padding.top,
                      child: IconButton(
                        onPressed: _backFromDetails,
                        icon: const Icon(Icons.arrow_back),
                        color: Colors.white,
                        style: IconButton.styleFrom(
                          backgroundColor: Colors.transparent,
                          foregroundColor: Colors.white,
                          padding: const EdgeInsets.all(8),
                          minimumSize: const Size(48, 48),
                        ),
                        tooltip: 'Back',
                      ),
                    ),

                  // –ó—Å—É–≤ –¥–µ—Ç–∞–ª–µ–π –Ω–∏–∂—á–µ –∫–Ω–æ–ø–∫–∏ "Back" (—è–∫—â–æ –≤–æ–Ω–∏ –≤—ñ–¥–∫—Ä–∏—Ç—ñ)
                  if (_stage == _OverlayStage.details && _selected != null)
                    Positioned.fill(
                      top: 68, // 12 –ø–∞–¥–¥—ñ–Ω–≥ + ~48 –∫–Ω–æ–ø–∫–∞ + –∑–∞–ø–∞—Å
                      child: DetailsFullScreen(place: _selected!),
                    ),
                ],
              ],
            ),
          ),
        ),
      ],
    );
  }
}
*/



/*

@override
  Widget build(BuildContext context) {
    final safeTop = MediaQuery.of(context).padding.top;

    return Stack(
      children: [
        // ---- –°–ø–∏—Å–æ–∫ –º—ñ—Å—Ü—å ----
        StreamBuilder<List<Place>>(
          stream: sl<PlacesRepository>().watch(),
          builder: (context, snap) {
            final places = snap.data ?? [];

            return ListView(
              padding: EdgeInsets.only(
                top: (59.0 - safeTop).clamp(0.0, double.infinity),
                bottom: 24 + MediaQuery.of(context).padding.bottom,
              ),
              children: [
                const GuideHeaderCard(),
                const SizedBox(height: 16),
                Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 20),
                  child: Text(
                    'Recommended places',
                    style: Theme.of(context).textTheme.headlineSmall?.copyWith(
                      color: Colors.white,
                      fontWeight: FontWeight.w700,
                    ),
                  ),
                ),
                const SizedBox(height: 12),

                for (final p in places)
                  PlaceCard(
                    place: p,
                    onOpen: () => _openDetails(p),
                    margin: const EdgeInsets.only(bottom: 12),
                  ),
              ],
            );
          },
        ),

        // ---- –î–µ—Ç–∞–ª—ñ ----
        IgnorePointer(
          ignoring: _stage != _Stage.details,
          child: _DetailsSlide(selected: _selected, onBack: _back),
        ),
      ],
    );
  }

*/